concurrency,,activities (resource sharing) appearing to occur at the "same time": processes; threads; synchronization
asynchrony,,dealing with unpredictable events (in time): exceptions; devices; i/o.
communication,,information transfer: communication; network programming
operating system,,the interface between user applications and the hardware. An OS implements a virtual machine that is easier to program than the raw machine
referee,,an operating system role: resource allocation among users; applications. Isolation of different users; applications from each other. Communication between users; applications
illusionist,,an operating system role: each application appears to have the entire machine to itself. Infinite number of processors (near) infinite amount of memory; reliable storage; reliable network transport
Handy-person,,an operating system role: libraries; UI widgets; drivers
An example of OS roles,,Referee: Prevent users from accessing each other's files without permission. Sharing disk space across the file system. Illusionist: Files can grow (nearly) arbitrarily large. Files persist even when the machine crashes in the middle of a save. Handy-person: Named directories; printf; ....
kernel,,core layer of the operating system. a library of procedures shared by all user programs- but the kernel is protected- kernel code is like the user code;but the kernel is privledged
systems programming,,low level- interfacing directly with the kernel and core system libraries (libc.a and glibc.a) -- systems programmer can use system calls directly (assembly)- alternatively language-specific libraries can be used to access system calls
abstraction,,high-level construct; useful- easy-to-use- understand; hides lower-level details; PL: class or structure data type
process,,an executing program: container for computing resources (abstraction)
thread,,an executing stream of instructions normally within a process- threads can also exist in the OS
concurrency,,(processes/threads run together) and shared resources can lead to problems
file system,,files/directories are an OS abstraction to make data storing and data sharing easier
communication,,two processes connected by a "pipe"- channel processes need to communicate
system call,,how user programs interact with the operating system
POSIX,,portable operating system interface
kernel,,core layer of OS, a library of procedures shared by all user programs (PROTECTED: user code cannot access internal kernel data structures directly) (PRIVLEDGED (like user code): access to all hardware directly, handles interrupts, hardware exceptions) - CPU is either in kernel mode of user-mode
systems programmer viewpoint,,can use system calls directly (in assembly), executed by the OS (kernel mode), when efficiency demands it, assembly code: x86 "int" instruction, e.g. int 48. C programming language can acces syscall
abstraction,,high-level construct; useful, easy-to-use, hides lower-level detial. PL: class or structure data-type.
process,,an executing program: container for computing resources (process tree)
threads,,an executing system of instructions normally within process
synchronization,,concurrency(processes/threads run together) and shared resources (think of the road intersection example - need sync to function)
file systen,,files/directories are an OS abstraction to make data storing and data sharing easier. They are abstracting the disk!
communication,,"pipe between 2 processes and a process flows between them"
memory management,,memory allocated to progrtams - abstraction - virtual memory
system calls,,how programs interact with the OS, C-Unix provides library interface to syscall to avoid messiness; read(), open()
unix standards,POSIX
taming complexity,,"systems", OS, Internet, ATC:: granularity, modularity, abstraction, layering, heirarchy, complexity